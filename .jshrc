#!/usr/bin/env bash
# ------------------------------------------------------------------------------
#
# This file holds many useful BASH commands to improve life in the shell
#
# Sections:
# 1. Environment Variables
# 2. Shell Enhancements
# 4. Prompt
# 4. Aliases
# 5. Functions
#
# ------------------------------------------------------------------------------


# --------------------------------------------------------------------
# 1. Environment Variables
# --------------------------------------------------------------------

export BASH_SILENCE_DEPRECATION_WARNING=1
export EDITOR=vim
export GPG_TTY=$(tty)
export GOPATH=$HOME/go
export JSH=$HOME/.jsh
export JSH_CUSTOM=$HOME/.jsh_local
export PATH=$HOME/.bin:$PATH
export SH=${SHELL##*/}
export TERM=xterm-256color
export VISUAL=vim

# Color palette
# ----------------------------------------------------------
if [[ $(uname) == 'Darwin' || $(command -v tput 2>/dev/null) ]]; then
  black="\001$(tput setaf 0)\002"
  red="\001$(tput setaf 1)\002"
  green="\001$(tput setaf 2)\002"
  orange="\001$(tput setaf 3)\002"
  blue="\001$(tput setaf 4)\002"
  purple="\001$(tput setaf 5)\002"
  cyan="\001$(tput setaf 6)\002"
  lightgray="\001$(tput setaf 7)\002"
  darkgray="\001$(tput setaf 8)\002"
  pink="\001$(tput setaf 9)\002"
  lime="\001$(tput setaf 10)\002"
  yellow="\001$(tput setaf 11)\002"
  aqua="\001$(tput setaf 12)\002"
  lavender="\001$(tput setaf 13)\002"
  ice="\001$(tput setaf 14)\002"
  white="\001$(tput setaf 15)\002"
  bold="\001$(tput bold)\002"
  underline="\001$(tput smul)\002"
  reset="\001$(tput sgr0)\002"
else
  black="\[\033[30m\]"
  red="\[\033[31m\]"
  green="\[\033[32m\]"
  orange="\[\033[33m\]"
  blue="\[\033[34m\]"
  purple="\[\033[35m\]"
  cyan="\[\033[36m\]"
  lightgray="\[\033[37m\]"
  darkgray="\[\033[90m\]"
  pink="\[\033[91m\]"
  lime="\[\033[92m\]"
  yellow="\[\033[93m\]"
  aqua="\[\033[94m\]"
  lavender="\[\033[95m\]"
  ice="\[\033[96m\]"
  white="\[\033[97m\]"
  bold="\[\033[1m\]"
  underline="\[\033[4m\]"
  reset="\[\033[0m\]"
fi


# --------------------------------------------------------------------
# 2. Shell Enhancements
# --------------------------------------------------------------------

# quiet: Mute output of a command or redirection
# ----------------------------------------------------------
quiet() { [[ $# == 0 ]] && &> /dev/null || "$*" &> /dev/null ; }

# Fix "command not found: compdef"
# ----------------------------------------------------------
[[ $SH == 'zsh' ]] && autoload -Uz compinit && compinit

# Show only two levels of pwd in prompt (Bash >=4 only)
# ----------------------------------------------------------
PROMPT_DIRTRIM=2

# Rid PATH of duplicates
# ----------------------------------------------------------
export PATH=$(echo "$PATH" | tr ':' '\n' | sort -u | tr '\n' ':' | sed 's/:$//g')

# Enable vi mode
# ----------------------------------------------------------
set -o vi

# Disable CTRL-S and CTRL-Q
# ----------------------------------------------------------
[[ $- =~ i && $SH == 'bash' ]] && stty -ixoff -ixon

# Use SHM for storing sensitive information
# ----------------------------------------------------------
if [[ "$(uname)" =~ "Darwin" ]]; then
  export SHM=$HOME/.vault
else
  export SHM=/dev/shm/$USER
fi
if [[ ! -d "$SHM" ]]; then
  mkdir $SHM
  chmod 700 $SHM
fi

# Enable shell completion
# ----------------------------------------------------------
if [[ -f /etc/${SH}_completion ]]; then
  source /etc/${SH}_completion
elif [[ -f /usr/local/etc/${SH}_completion ]]; then
  source /usr/local/etc/${SH}_completion
fi

# Enable k8s completion
# ----------------------------------------------------------
if command -v &>/dev/null
then
  source <(kubectl completion $SH)
fi

# Enable fzf
# ----------------------------------------------------------
if [[ -d /usr/local/opt/fzf/bin ]]; then
  if [[ ! "$PATH" == */usr/local/opt/fzf/bin* ]]; then
    export PATH="${PATH:+${PATH}:}/usr/local/opt/fzf/bin"
  fi
  [[ $- == *i* ]] && source "/usr/local/opt/fzf/shell/completion.$SH" 2>/dev/null
  source "/usr/local/opt/fzf/shell/key-bindings.$SH"
fi

# Enable color support of ls and also add handy aliases
# ----------------------------------------------------------
if [[ -x /usr/bin/dircolors ]]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Ancillary functionality
# ----------------------------------------------------------
if [[ -n $JSH_CUSTOM && -f $JSH_CUSTOM ]]; then
  source $JSH_CUSTOM
fi


# --------------------------------------------------------------------
# 3. Prompt
# --------------------------------------------------------------------

prompt_cmd() {
  [[ $? == 0 ]] && ret="${green}" || ret="${red}"
  [[ -n $PROMPT_SYMBOL ]] && local prompt_symbol="$PROMPT_SYMBOL" || local prompt_symbol='>'
  local dir="${cyan}\w${reset}"
  local git="${purple}\$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')${reset}"
  local host="${yellow}\h${reset}"
  local user="${orange}\u${reset}"
  if [[ -n "$WORKSPACE" ]]; then
    local workspace="${red}[$WORKSPACE]${reset}"
  fi
  if [[ -n $PROMPT_CUSTOM ]]; then
    PS1=${PROMPT_CUSTOM}
  else
    if [[ $PROMPT == 'mini' ]]; then
      local prompt="${ret}${prompt_symbol} ${reset}"
      PS1="${prompt}${dir}${git}${workspace} "
    elif [[ $PROMPT == 'full' ]]; then
      local prompt="${ret}└─╼ ${reset}"
      PS1="${bold}┌─[${reset}${user}@${host}:${dir}${git}${bold}]${reset}${workspace}\n${prompt}"
    else
      PS1="${workspace}${user}@${host}:${dir}${git}${ret}$ ${reset}"
    fi
  fi
}
[[ $SH == 'bash' ]] && export PROMPT_COMMAND=prompt_cmd || unset PROMPT_COMMAND


# --------------------------------------------------------------------
# 4. Aliases
# --------------------------------------------------------------------

# Colourize tool for more elaborate coloring
# ----------------------------------------------------------
if [[ $(which grc 2>/dev/null) ]]; then
  alias colorize="$(which grc) -es --colour=auto"
  alias as='colorize as'
  alias configure='colorize ./configure'
  alias df='colorize df'
  alias diff='colorize diff'
  alias dig='colorize dig'
  alias g++='colorize g++'
  alias gas='colorize gas'
  alias gcc='colorize gcc'
  alias head='colorize head'
  alias ld='colorize ld'
  alias make='colorize make'
  alias mount='colorize mount'
  alias mtr='colorize mtr'
  alias netstat='colorize netstat'
  alias ping='colorize ping'
  alias ps='colorize ps'
  alias tail='colorize tail'
  alias traceroute='colorize /usr/sbin/traceroute'
fi

# Color fallback
# ----------------------------------------------------------
if ls --help 2>&1 | grep -q -- --color; then
  alias ls='ls --color=auto -F -N'
else
  alias ls='ls -FG'
fi

# Assorted
# ----------------------------------------------------------
alias -- -='cd -' # Return to base dir
alias ..='cd ../' # Go back 1 directory level
alias ...='cd ../../' # Go back 2 directory levels
alias .3='cd ../../../' # Go back 3 directory levels
alias .4='cd ../../../../' # Go back 4 directory levels
alias .5='cd ../../../../../' # Go back 5 directory levels
alias .6='cd ../../../../../../' # Go back 6 directory levels
alias 000='chmod 000' # ---------- (nobody)
alias 640='chmod 640' # -rw-r----- (user: rw, group: r, other: -)
alias 644='chmod 644' # -rw-r--r-- (user: rw, group: r, other: -)
alias 755='chmod 755' # -rwxr-xr-x (user: rwx, group: rx, other: x)
alias 775='chmod 775' # -rwxrwxr-x (user: rwx, group: rwx, other: rx)
alias _='sudo' # Evolve into superuser
alias a='ansible' # Abbreviation
alias ap='ansible-playbook' # Abbreviation
alias av='ansible-vault' # Abbreviation
alias c='clear' # c: Clear terminal display
alias cd..='cd ../' # Go back 1 directory level (for fast typers)
alias cic='set completion-ignore-case On' # cic: Make tab-completion case-insensitive
alias cp='cp -iv' # Preferred 'cp' implementation
alias curl='curl -w "\n"'
alias d='dirs -v | head -10' # Display dir
alias dud='du -d 1 -h' # Short and human-readable file listing
alias duf='du -sh *' # Short and human-readable directory listing
alias fix_stty='stty sane' # fix_stty: Restore terminal settings when screwed up
alias g='git' # Abbreviation
alias gdiff='git diff --name-only master' # List files changed in this branch compared to master
alias gdiffcp='gdiff | xargs -I{} rsync --relative {}' # Copy modified files to another dir
alias gitv='git log --graph --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"' # Beautify logs
alias glances='glances -1 -t 0.5' # Faster output from glances
alias grep='grep --color=auto -i' # Preferred 'grep' implementation
alias k='kubectl' # Abbreviate kube control
alias kaf='kubectl apply -f' # Apply k8s manifest
alias kctx='kubectx' # Change kube context
alias kdel='kubectl delete' # Delete resource
alias kdelp='kubectl delete pods' # Delete all pods matching passed arguments
alias kdp='kubectl describe pods' # Describe all pods
alias keti='kubectl exec -it' # Open terminal into pod
alias kgd='kubectl get deployments' # Get the deployment
alias kgp='kubectl get pods' # List all pods in ps output format
alias kns='kubens' # Change kube namespace
alias kres='kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq' # Get all possible kinds
alias kver='kubectl api-versions' # List all APIs
alias less='less -FSRXc' # Preferred 'less' implementation
alias make10mb='truncate -s 10m ./10MB.dat' # make10mb: Creates a file of 10mb size (all zeros)
alias make1mb='truncate -s 1m ./1MB.dat' # make1mb: Creates a file of 1mb size (all zeros)
alias make5mb='truncate -s 5m ./5MB.dat' # make5mb: Creates a file of 5mb size (all zeros)
alias md='mkdir -p' # Create directory
alias mkdir='mkdir -pv' # Preferred 'mkdir' implementation
alias mountReadWrite='/sbin/mount -uw /' # mountReadWrite: For use when booted into single-user
alias mv='mv -iv' # Preferred 'mv' implementation
alias mx='chmod a+x' # ---x--x--x (user: --x, group: --x, other: --x)
alias nano='nano -W' # Preferred 'nano' implementation
alias numFiles='echo $(ls -1 | wc -l)' # numFiles: Count of non-hidden files in current dir
alias pass='openssl passwd -1' # pass: Generate salted hash for passwords
alias path='echo -e ${PATH//:/\\n}' # path: Echo all executable Paths
alias perm='stat --printf "%a %n \n "' # perm: Show permission of target in number
alias pip='pip3'
alias please='sudo ' # Politely ask for superuser
alias proxy='http_proxy=$PROXY_ENDPOINT https_proxy=$PROXY_ENDPOINT no_proxy=$PROXY_EXCEPTION' # proxy: set as per env and on command
alias qfind='find . -name ' # qfind: Quickly search for file
alias rd='rmdir' # Remove directory (no force)
alias show_options='shopt' # Show_options: display bash options settings
alias src='source ~/.jshrc' # src: Reload .jshrc file
alias sshx='eval $(ssh-agent) && ssh-add 2>/dev/null' # sshx: Import SSH keys
alias sudo='sudo '
alias tf='terraform' # Abbreviation
alias w='watch -n1 -d -t ' # Faster watch, highlight changes and no title
alias wget='wget -c' # Preferred 'wget' implementation (resume download)

# Directory Listing aliases
# ----------------------------------------------------------
alias dir='ls -hFx'
alias l='ls -la' # long, show hidden files
alias lT='ls -lAthF' # long, sort by newest to oldest
alias lt='ls -lAtrhF' # long, sort by oldest to newest
alias la='ls -Al' # show hidden files
alias lc='ls -lcr' # sort by change time
alias lk='ls -lSr' # sort by size
alias lh='ls -lSrh' # sort by size human readable
alias lm='ls -al | more' # pipe through 'more'
alias lo='ls -laSFh' # sort by size largest to smallest
alias lr='ls -lR' # recursive ls
alias lt='ls -ltr' # sort by date
alias lu='ls -lur' # sort by access time

# memHogsTop, memHogsPs: Find memory hogs
# ----------------------------------------------------------
alias memHogsTop='top -l 1 -o rsize | head -20'
alias memHogsPs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'

# cpuHogs: Find CPU hogs
# ----------------------------------------------------------
alias cpu_hogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

# topForever: Continual 'top' listing (every 10 seconds)
# ----------------------------------------------------------
alias topf='top -l 9999999 -s 10 -o cpu'

# Date & Time Management
# ----------------------------------------------------------
alias bdate="date '+%a, %b %d %Y %T %Z'"
alias cal3='cal -3'
alias da='date "+%Y-%m-%d %A %T %Z"'
alias daysleft='echo "There are $(($(date +%j -d"Dec 31, $(date +%Y)")-$(date +%j))) left in year $(date +%Y)."'
alias epochtime='date +%s'
alias mytime='date +%H:%M:%S'
alias secconvert='date -d@1234567890'
alias stamp='date "+%Y%m%d%a%H%M"'
alias timestamp='date "+%Y%m%dT%H%M%S"'
alias today='date +"%A, %B %-d, %Y"'
alias weeknum='date +%V'


# --------------------------------------------------------------------
# 5. Functions
# --------------------------------------------------------------------

# Messages
# ----------------------------------------------------------
error() { echo -e ${red}$@${reset}; return 1 ; }
warn() { echo -e ${orange}$@${reset} ; }
success() { echo -e ${green}$@${reset} ; }
info() { echo -e ${blue}$@${reset} ; }

# Searching
# ----------------------------------------------------------
ff() { /usr/bin/find . -name "$@" ; }     # ff: Find file under the current directory
ffs() { /usr/bin/find . -name "$@"'*' ; } # ffs: Find file whose name starts with a given string
ffe() { /usr/bin/find . -name '*'"$@" ; } # ffe: Find file whose name ends with a given string
bigfind() {
  if [[ $# -lt 1 ]]; then
    warn "Usage: bigfind DIRECTORY"
    return
  fi
  du -a "$1" | sort -n -r | head -n 10
}

# buf: Back up file with timestamp
# ----------------------------------------------------------
buf() {
  local filename filetime
  filename=$1
  filetime=$(date +%Y%m%d_%H%M%S)
  cp -a "${filename}" "${filename}_${filetime}"
}

# curldebug: Download a web page and show info on what took time
# ----------------------------------------------------------
curldebug() {
  /usr/bin/curl "$@" -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\\n"
}

# curlheader: Grabs headers from web page
# ----------------------------------------------------------
curlheader() {
  /usr/bin/curl -I -L "$@"
}

# duh: Disk usage per directory, sorted by ascending size
# ----------------------------------------------------------
duh() {
  if [[ $(uname) == "Darwin" ]]; then
    if [[ -n $1 ]]; then
      du -hd 1 "$1" | sort -h
    else
      du -hd 1 | sort -h
    fi
  elif [[ $(uname) == Linux ]]; then
    if [[ -n $1 ]]; then
      du -h --max-depth=1 "$1" | sort -h
    else
      du -h --max-depth=1 | sort -h
    fi
  fi
}

# extract: Extract most know archives with one command
# ----------------------------------------------------------
extract() {
  if [ -f "$1" ]
  then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# findPid: Find out the pid of a specified process
# ----------------------------------------------------------
findPid() {
  lsof -t -c "$@"
}

# git-reset-history: Replace all commits with an initial commit
# ----------------------------------------------------------
git-reset-history() {
  git checkout --orphan TEMP_BRANCH && \
  git add -A && \
  git commit -m "Initial commit" && \
  git branch -D master && \
  git branch -m master && \
  git push -f origin master
}

# hstats: Show the n most used commands. defaults to 10
# ----------------------------------------------------------
hstats() {
  if [[ $# -lt 1 ]]; then
    NUM=10
  else
    NUM=${1}
  fi
  history | awk '{print $2}' | sort | uniq -c | sort -rn | head -"$NUM"
}

# ii: Display useful host related informaton
# ----------------------------------------------------------
ii() {
  echo -e "\\nYou are logged on ${red}$HOST"
  echo -e "\\nAdditionnal information:$NC " ; uname -a
  echo -e "\\n${red}Users logged on:$NC " ; w -h
  echo -e "\\n${red}Current date :$NC " ; date
  echo -e "\\n${red}Machine stats :$NC " ; uptime
  [[ "$OSTYPE" == darwin* ]] && echo -e "\\n${red}Current network location :$NC " && scselect
  echo -e "\\n${red}Public facing IP Address :$NC " ;myip
  [[ "$OSTYPE" == darwin* ]] && echo -e "\\n${red}DNS Configuration:$NC " && scutil --dns
  echo
}

# ips: Display all ip addresses for this host
# ----------------------------------------------------------
ips() {
  if command -v ifconfig &>/dev/null
  then
    ifconfig | awk '/inet /{ print $2 }'
  elif command -v ip &>/dev/null
  then
    ip addr | grep -oP 'inet \K[\d.]+'
  else
    echo "You don't have ifconfig or ip command installed!"
  fi
}

# lsgrep: Search through directory contents with grep
# ----------------------------------------------------------
lsgrep() { ls | grep "$*" ; }

# mkd: Makes new dir and jumps inside
# ----------------------------------------------------------
mkd() { mkdir -p -- "$*" ; cd -- "$*" || exit ; }

# mkiso: Creates iso from current dir in the parent dir (unless defined)
# ----------------------------------------------------------
mkiso() {
  if type "mkisofs" > /dev/null
  then
    if [ -z ${1+x} ]
    then
      local isoname=${PWD##*/}
    else
      local isoname=$1
    fi

    if [ -z ${2+x} ]
    then
      local destpath=../
    else
      local destpath=$2
    fi

    if [ -z ${3+x} ]
    then
      local srcpath=${PWD}
    else
      local srcpath=$3
    fi

    if [ ! -f "${destpath}${isoname}.iso" ]
    then
      echo "writing ${isoname}.iso to ${destpath} from ${srcpath}"
      mkisofs -V "${isoname}" -iso-level 3 -r -o "${destpath}${isoname}.iso" "${srcpath}"
    else
      echo "${destpath}${isoname}.iso already exists"
    fi
  else
    echo "mkisofs cmd does not exist, please install cdrtools"
  fi
}

# myip: Display public IP
# ----------------------------------------------------------
myip() {
  res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
  echo -e "Your public IP is: ${green} $res ${reset}"
}

# myps: List processes owned by my user:
# ----------------------------------------------------------
myps() {
  ps "$@" -u "$USER" -o pid,%cpu,%mem,start,time,bsdtime,command
}

# viw: Edit at source
# ----------------------------------------------------------
viw() {
  if [[ $# == 1 && -n $EDITOR ]]; then
    $EDITOR $(which $1)
  fi
}

# vk (vault key): Store ephemeral data in secure and/or ephemeral storage (e.g system memory)
# ----------------------------------------------------------
vk() {
  [[ -z $SHM ]] && error "$SHM not set"
  if [[ $# == 1 ]]; then
    local e_data
    local target="$SHM/.vault-$1"
    if [[ ! -f "" ]]; then
      echo -n "Input key for $1: "
      read -s e_data
      echo ""
      echo $e_data > $target
      chmod 600 $target
    fi
  else
    error "Usage: vk VAULT_NAME"
  fi
}

# ws: Change workspace
# ----------------------------------------------------------
ws() {
  if [[ $# == 1 ]]; then
    export WORKSPACE=$1
  elif [[ $# > 1 ]]; then
    error "Usage: ws WORKSPACE"
  else
    if [[ -z $WORKSPACE && -n $DEFAULT_WORKSPACE ]]; then
      export WORKSPACE=$DEFAULT_WORKSPACE
    fi
  fi

  # Black box
  if [[ $(command -v setw 2>/dev/null) ]]; then
    export WORKSPACE=$(setw)
  fi

  # Set ansible vault password
  if [[ $(command -v ansible-playbook 2>/dev/null) ]]; then
    if [[ -n $WORKSPACE ]]; then
      [[ $(cat $SHM/.vault-$WORKSPACE) != '' ]] || vk $WORKSPACE
      if [[ -z $GIT_INV ]]; then
        if [[ $(git status 2>/dev/null) ]]; then
          GIT_INV=$(pwd)/inv
        else
          GIT_INV=./inv
        fi
      fi
      if [[ -d $GIT_INV/$WORKSPACE ]]; then
        export ANSIBLE_INVENTORY="$GIT_INV/$WORKSPACE"
      else
        error "Ansible inventory $GIT_INV/$WORKSPACE not found!"
      fi
      if [[ -f $SHM/.vault-$WORKSPACE ]]; then
        export ANSIBLE_VAULT_PASSWORD_FILE="$SHM/.vault-$WORKSPACE"
      else
        error "Ansible vault password file $SHM/.vault-$WORKSPACE not found!"
      fi
    else
      unset ANSIBLE_INVENTORY
      unset ANSIBLE_VAULT_PASSWORD_FILE
    fi
  fi
}

# zipf: To create a ZIP archive of a folder
# ----------------------------------------------------------
zipf() { zip -r "$1".zip "$1" ; }
