---
# yaml-language-server: $schema=https://taskfile.dev/schema.json

dotenv:
  - .env
  - "{{.ENV}}/.env."
  - "{{.HOME}}/.env"

env:
  PATH: /home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:{{.PATH}}

includes:
  os: ".taskfiles/{{OS}}/taskfile.yaml"
  wsl: ".taskfiles/windows/taskfile.yaml"

tasks:
  chsh:
    cmd: chsh -s /bin/zsh
    status:
      - test "$(basename -- "$SHELL")" == "zsh"

  cleanup:
    cmds:
      - cmd: task cleanup-sync-conflicts
        ignore_error: true
      - cmd: task cleanup-kube-cache
        ignore_error: true
      - cmd: task cleanup-git
        ignore_error: true
    desc: Clean up local paths known for excessive files

  cleanup-git:
    cmd: git gc --aggressive --prune=now
    dir: "{{.ROOT_DIR}}"
    prompt: Delete git objects and untracked files?

  cleanup-kube-cache:
    cmd: rm -rf {{.ROOT_DIR}}/.kube/cache
    dir: "{{.ROOT_DIR}}"
    prompt: Delete kubectl cache files?

  cleanup-sync-conflicts:
    cmd: find {{.ROOT_DIR}} -name "*.sync-conflict*" -delete
    prompt: Delete sync conflict files?

  commit:
    aliases:
      - cz
    cmd: cz commit
    desc: Interactive conventional commit using commitizen
    dir: "{{.ROOT_DIR}}"
    interactive: true
    preconditions:
      - msg: "commitizen not found. Install with: pip install commitizen"
        sh: command -v cz

  configure:
    cmds:
      - task: stow
      - task: chsh
      - task: git
      - task: mount
      - task: os:configure
    desc: Configure OS-specific settings and applications

  default:
    cmd: task -l
    silent: true

  fzf:
    cmd: "{{.ROOT_DIR}}/.fzf/install --bin --no-zsh"
    preconditions:
      - test -x "{{.ROOT_DIR}}/.fzf/install"

  git:
    cmds:
      - task: git-submodules
      - task: git-hooks

  git-hooks:
    cmd: pre-commit install --hook-type commit-msg
    dir: "{{.ROOT_DIR}}"
    preconditions:
      - msg: "pre-commit not found. Install with: task install"
        sh: command -v pre-commit

  git-submodules:
    cmd: git submodule update --init --remote

  install:
    aliases:
      - init
      - provision
      - setup
    cmds:
      - task: install-deps
      - task: os:install
    desc: Provision installations and configurations

  install-casks:
    cmd: brew install --force --cask {{range .casks}}{{.}} {{end}}
    status:
      - test -z "{{.casks}}"

  install-deps:
    cmds:
      - task: fzf
      - task: install-homebrew
      - task: install-casks
      - task: install-formulae
      - task: install-links

  install-formulae:
    cmd: brew install --force {{range .formulae}}{{.}} {{end}}
    status:
      - test -z "{{.formulae}}"

  install-homebrew:
    cmd: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    status:
      - command -v brew

  install-links:
    cmd: brew install --force {{range .links}}{{.}} {{end}}
    status:
      - test -z "{{.links}}"

  mount:
    cmd: "{{.ROOT_DIR}}/scripts/unix/configure-mounts.sh {{.CLI_ARGS}}"
    desc: "Configure and mount SMB shares. Usage: task mount [mount_name]"
    dir: "{{.ROOT_DIR}}"
    interactive: true

  setup:
    cmds:
      - task: install
      - task: configure
    desc: Configure and install jsh

  stow:
    cmd: stow . --adopt
    dir: "{{.ROOT_DIR}}"

  uninstall:
    cmd: stow -D .
    desc: Retract dotfiles from home directory
    dir: "{{.ROOT_DIR}}"

  upgrade:
    cmds:
      - cmd: brew upgrade
      - task: os:upgrade
    desc: Upgrade brew packages

version: 3
